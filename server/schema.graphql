scalar DateTime

type Query {
  user(userName: String id: ID): User
  project(id: ID!): Project
  assignment(id: ID!): Assignment
  userProject(userName: String! projectName: String!): [Project] # data for the bubble expansion
  statsProject(projectName: String!): [Int] # time (sec) per user 
  statsAssignment(assignmentName: String!): [Int] # time (sec) per user
}

type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(userName: String): String
  createProject(data: CreateProjectInput): Project!
  deleteProject(id: ID): String
  # updateProject(id: ID!, data: UpdateProjectInput): Project
  createAssignment(data: CreateAssignmentInput): Assignment!
  deleteAssignment(id: ID): String
  # updateAssignment(id: ID!, data: updateAssignmentInput): Assignment
}

# type Subscription {
#   project: ProjectSubscriptionPayload!,
#   assignment: AssignmentSubscriptionPayload!
# }

input CreateUserInput {
  userName: String!
}

input CreateProjectInput {
  userid: ID!
  projectName: String!
  links: [String]
}

# input UpdateProjectInput {
#   userName: String
#   projectName: String
#   links: [String]
# }

input CreateAssignmentInput {
  userid: ID!
  projectid: ID!
  assignmentName: String!
  deadline: DateTime
  isComplete: Int
}

# input updateAssignmentInput {
#   assignmentName: String
#   deadline: DateTime
#   record: [{
#     startAt: DateTime,
#     duration: Int
#   }]
#   status: Int
# }


type User {
  id: ID!
  userName: String!
  projects: [Project]
}

type Project {
  id: ID!
  projectName: String!
  assignments: [Assignment]
  links: [String]
}

type Assignment {
  id: ID!
  assignmentName: String!
  deadline: DateTime
  record: [TimeRecord]
  status: Int
}

type TimeRecord {
  startAt: DateTime
  duration: Int
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

# type ProjectSubscriptionPayload {
#   mutation: MutationType!
#   data: Project!
# }

# type AssignmentSubscriptionPayload {
#   mutation: MutationType!
#   data: Assignment!
# }