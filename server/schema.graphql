scalar DateTime

type Query {
  user(userName: String id: ID): User # must given one
  project(id: ID!): Project
  assignment(id: ID!): Assignment
  projectNames: [SubjectCount]
  assignmentNames(projectName: String): [SubjectCount] # when no given projectName, return all projectNames
  searchStats(projectName: String! assignmentName: String): [Int]
  users: [User]
}

type Mutation {
  createUser(data: CreateUserInput): User
  deleteUser(id: ID!): String
  updateUser(id: ID!, data: UpdateUserInput): User
  createProject(data: CreateProjectInput): Project!
  deleteProject(userID: ID!, id: ID!): String
  updateProject(userID: ID!, id: ID!, data: UpdateProjectInput): Project!
  createAssignment(userID: ID!, data: CreateAssignmentInput): Assignment!
  deleteAssignment(userID: ID!, id: ID!): String
  updateAssignment(userID: ID!, id: ID!, data: UpdateAssignmentInput): Assignment!
  createRecord(userID: ID!, data: CreateRecordInput): Record
  deleteRecord(userID: ID!, id: ID!): String
  updateRecord(userID: ID!, id: ID!, data: UpdateRecordInput): Record
  clearCluster: String
}

type Subscription {
  user: UserSubscriptionPayload!,
}

input CreateUserInput {
  userName: String!
}
input UpdateUserInput {
  userName: String
}

input CreateProjectInput {
  userID: ID!
  projectName: String!
  links: [String]
}
input UpdateProjectInput { # update with whole links array
  projectName: String
  links: [String]
}

input CreateAssignmentInput {
  projectID: ID!
  assignmentName: String!
  deadline: DateTime
  isComplete: Boolean
}
input UpdateAssignmentInput {
  assignmentName: String
  deadline: DateTime
  status: Int
  isComplete: Boolean
}

input CreateRecordInput {
  assignmentID: ID!
  startAt: DateTime
  duration: Int!
}
input UpdateRecordInput {
  startAt: DateTime
  duration: Int
}

type User {
  id: ID!
  userName: String!
  projects: [Project]
}

type Project {
  id: ID!
  projectName: String!
  assignments: [Assignment]
  links: [String]
}

type Assignment {
  id: ID!
  assignmentName: String!
  deadline: DateTime
  records: [Record]
  status: Int
  isComplete: Boolean
}

type Record {
  id: ID!
  startAt: DateTime
  duration: Int
}

type SubjectCount {
  name: String
  count: Int
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type UserSubscriptionPayload {
  mutation: MutationType!
  data: User
}